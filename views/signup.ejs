<!DOCTYPE html>
<html>
  <head>
    <title>New Sails App</title>
    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <!--
    Stylesheets and Preprocessors
    ==============================
    You can always bring in CSS files manually with `<link>` tags, or asynchronously
    using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
    of Sails' conventional asset pipeline (boilerplate Gruntfile).
    By default, stylesheets from your `assets/styles` folder are included
    here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
    are supported. In production, your styles will be minified and concatenated into
    a single file.
    To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
    For example, here are a few things you could do:
    + Change the order of your CSS files
    + Import stylesheets from other directories
    + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->
    <!--STYLES-->
    <link rel="stylesheet" href="/styles/angular-toastr.css">
    <link rel="stylesheet" href="/styles/bootstrap.min.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->

    <script type="text/javascript">
    window.SAILS_LOCALS = {
      me: <%- JSON.stringify(me||null) %>
    };
    </script>

  </head>
  <body ng-app="brushfire" ng-controller="signupPageController" ng-cloak>
    <div class="container-fluid">
      <!-- Creates the navbar -->
      <nav class="navbar navbar-default navbar-inverse">
        <!-- This creates the mechanism for collapse button -->
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
        <!-- This controls the number of lines in the image when the nav collapse -->
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        </button>
        <!-- This is the brand on the left-hand side. -->
        <a class="navbar-brand" href="/"> Brushfire</a>
        <div class="collapse navbar-collapse">
          <ul class="nav navbar-nav">
            <li><a href="/#videos">Cat videos</a></li>
          </ul>
          <form ng-submit="submitLoginForm()" class="navbar-form navbar-right">
            <div class="form-group">
              <input ng-model="loginForm.email" type="text" placeholder="Email" name="email" class="form-control">
            </div>
            <div class="form-group">
              <input ng-model="loginForm.password" type="password" placeholder="Password" name="password" class="form-control">
            </div>
            <button type="submit" class="btn btn-success">
            <span ng-show="!loginForm.loading">Sign in</span>
            <span ng-show="loginForm.loading" class="fa fa-spinner"></span>
            <span ng-show="loginForm.loading">Signing in...</span>
            </button>
            <input type="hidden" name="_csrf" value="<%= _csrf %>" />
          </form>
        </div>
      </nav>
      <!-- Angular client-side routes determine the contents of this div. -->
      <!-- SIGNUP FORM -->
      <!-- Error state -->
      <div class="alert alert-info toggle" ng-show="signupForm.errorMsg">
        <h5>Oops!</h5>
        <p>Looks like an error occurred.  Please try again later.</p>
        <code>
        {{signupForm.errorMsg}}
        </code>
      </div>
      <!-- Loading state -->
      <div ng-show="signupForm.loading">
        <span class="overlord-loading-spinner fa fa-spinner"></span>
        <span>Loading user data...</span>
      </div>
      <div ng-hide="signupForm.loading">
        <form ng-submit="submitSignupForm()" id="sign-up-form" class="form-signup" name="signup">
          <h2 class="form-signin-heading">Create a user account</h2>
          <div class="row">
            <!-- E M A I L -->
            <div class="control-group form-group col-md-12"
              ng-class="{'has-error':signup.email.$invalid &&
              signup.email.$dirty}">
              <label>Your email address</label>
              <input type="email" class="form-control" placeholder="nikola@tesla.com" name="email" ng-model="signupForm.email" required >
              <span class="help-block has-error" ng-if="signup.email.$dirty">
                <span ng-show="signup.email.$error.required">Email address is required.</span>
                <span ng-show="signup.email.$error.email">Not a valid email address.</span>
              </span>
            </div>
            <!-- P A S S W O R D -->
            <div class="control-group form-group col-md-6"
              ng-class="{'has-error':signup.password.$invalid &&
              signup.password.$dirty}">
              <label>Password</label>
              <!-- Added the compareTo directive that compares the passowrds -->
              <input type="password" class="form-control" placeholder="at least 6 characters" name="password" ng-model="signupForm.password" id="password" required ng-minlength="6" compare-to="signupForm.confirmPassword" >
              <span class="help-block has-error" ng-if="signup.password.$dirty">
                <span ng-show="signup.password.$error.required">Password is required.</span>
                <span ng-show="signup.password.$error.minlength">Password must be at least 6 characters.</span>
              </span>
            </div>
            <!-- C O N F I R M  P A S S W O R D -->
            <div class="control-group form-group col-md-6">
              <label>Re-enter password</label>
              <input type="password" class="form-control" placeholder="one more time" name="confirmation" ng-model="signupForm.confirmPassword" required>
              <span class="help-block has-error" ng-if="signup.confirmation.$dirty">
                <span ng-show="signup.password.$error.compareTo">Password must match.</span>
                <span ng-show="signup.confirmation.$error.required">Confirmation password is required.</span>
              </span>
            </div>
          </div>
          <br/>
          <!-- Disable signup button until the form has no errors -->
          <button class="btn btn-primary btn-lg btn-block" type="submit" ng-disabled="signup.$invalid">
          <span ng-show="!signupForm.loading">Create User Account</span>
          <span class="overlord-loading-spinner fa fa-spinner" ng-show="signupForm.loading" ></span>
          <span ng-show="signupForm.loading">Preparing your new account...</span>
          </button>
          <span class="col-md-offset-3 col-md-6 text-center"> <a href='/restore'>restore an account</a> </span>
        </form>
      </div>
      <!--
      Client-side Templates
      ========================
      HTML templates are important prerequisites of modern, rich client applications.
      To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
      that you load these templates client-side.
      By default, your Gruntfile is configured to automatically load and precompile
      client-side JST templates in your `assets/templates` folder, then
      include them here automatically (between TEMPLATES and TEMPLATES END).
      To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:
      + Import templates from other directories
      + Use a different template engine (handlebars, jade, dust, etc.)
      + Internationalize your client-side templates using a server-side
      stringfile before they're served.
      -->
      <!--TEMPLATES-->
      <script type="text/javascript" src="/jst.js"></script>
      <!--TEMPLATES END-->
      <!--
      Client-side Javascript
      ========================
      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).
      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.
      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:
      + Change the order of your scripts
      + Import scripts from other directories
      + Use a different preprocessor, like TypeScript
      -->
      <!--SCRIPTS-->
      <script src="/js/dependencies/sails.io.js"></script>
      <script src="/js/dependencies/angular.js"></script>
      <script src="/js/dependencies/angular-route.min.js"></script>
      <script src="/js/dependencies/angular-toastr.js"></script>
      <script src="/js/dependencies/compareTo.module.js"></script>
      <script src="/js/dependencies/jquery-1.11.2.min.js"></script>
      <script src="/js/dependencies/lodash.js"></script>
      <script src="/js/app.js"></script>
      <script src="/js/controllers/editProfilePageController.js"></script>
      <script src="/js/controllers/homePageController.js"></script>
      <script src="/js/controllers/profilePageController.js"></script>
      <script src="/js/controllers/restorePageController.js"></script>
      <script src="/js/controllers/signupPageController.js"></script>
      <script src="/js/controllers/videosPageController.js"></script>
      <!--SCRIPTS END-->
    </body>
  </html>